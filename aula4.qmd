---
title: "aula4"
format: html
editor: visual
---

# #Importación de datos

#Gracias al paquete datapasta, podemos copiar y pegar bases de datos como si fueran bases de datos en codigo python utilizando paste as tribble o dataframe.

```{r}
library(datapasta)
dat <- tibble::tribble(
      ~trat, ~rep, ~comp,
      "Mg2",   1L,     9,
      "Mg2",   2L,  12.5,
      "Mg2",   3L,    10,
      "Mg2",   4L,     8,
      "Mg2",   5L,  13.2,
      "Mg2",   6L,    11,
      "Mg2",   7L,  10.8,
      "Mg2",   8L,   9.5,
      "Mg2",   9L,  10.8,
      "Mg2",  10L,  10.4,
  "control",   1L, 13.72,
  "control",   2L, 15.91,
  "control",   3L,  15.7,
  "control",   4L,  14.2,
  "control",   5L,  15.9,
  "control",   6L, 16.54,
  "control",   7L,    18,
  "control",   8L,  14.4,
  "control",   9L, 16.41,
  "control",  10L,    16
  )
dat

comp<-data.frame(check.names = FALSE,
                `9` = c(12.5,10,8,13.2,11,10.8,
                        9.5,10.8,10.4,13.72,15.91,15.7,
                        14.2,15.9,16.54,
                        18,14.4,16.41,16))

comp

```

#Desde una pagina web podemos obtener datos, copiar las tablas y pegarlas como data frame listas, asi como en el siguiente ejemplo tomado de la pagina web

```{r}
poblaciones <- tibble::tribble(
  ~Fecha, ~Densidad,    ~Hombres,    ~Mujeres,  ~Población,
   2022L,      102L,          NA,          NA, "5.229.000",
   2021L,      101L, "2.578.741", "2.575.216", "5.180.000",
   2020L,      100L, "2.564.622", "2.558.483", "5.128.000",
   2019L,       99L, "2.546.376", "2.538.156", "5.075.000",
   2018L,       98L, "2.525.472", "2.515.262", "5.022.000",
   2017L,       97L, "2.502.859", "2.490.983", "4.966.000",
   2016L,       96L, "2.479.289", "2.465.916", "4.909.000",
   2015L,       95L, "2.455.070", "2.440.173", "4.851.000",
   2014L,       94L, "2.430.257", "2.414.032", "4.793.000",
   2013L,       93L, "2.404.428", "2.387.107", "4.733.000",
   2012L,       91L, "2.377.400", "2.359.193", "4.673.000",
   2011L,       90L, "2.349.468", "2.330.459", "4.613.000",
   2010L,       89L, "2.321.021", "2.301.231", "4.554.000",
   2009L,       87L, "2.291.917", "2.271.211", "4.469.000",
   2008L,       86L, "2.261.818", "2.240.104", "4.404.000",
   2007L,       85L, "2.231.315", "2.208.704", "4.340.000",
   2006L,       84L, "2.200.829", "2.177.342", "4.279.000",
   2005L,       82L, "2.170.068", "2.145.820", "4.215.000",
   2004L,       81L, "2.138.782", "2.114.018", "4.152.000",
   2003L,       80L, "2.106.901", "2.081.709", "4.086.000",
   2002L,       79L, "2.074.083", "2.048.540", "4.022.000",
   2001L,       77L, "2.039.504", "2.013.719", "3.953.000",
   2000L,       75L, "2.002.605", "1.976.587", "3.810.000",
   1999L,       75L, "1.963.914", "1.937.516", "3.838.000",
   1998L,       73L, "1.924.069", "1.897.353", "3.747.000",
   1997L,       72L, "1.883.219", "1.856.202", "3.657.000",
   1996L,       70L, "1.841.732", "1.814.502", "3.565.000",
   1995L,       68L, "1.800.079", "1.772.777", "3.470.000",
   1994L,       66L, "1.758.226", "1.730.927", "3.373.000",
   1993L,       64L, "1.716.205", "1.689.167", "3.275.000",
   1992L,       62L, "1.674.268", "1.647.671", "3.191.000",
   1991L,       61L, "1.632.684", "1.606.731", "3.122.000",
   1990L,       60L, "1.591.754", "1.566.500", "3.051.000",
   1989L,       58L, "1.551.852", "1.527.149", "2.977.000",
   1988L,       57L, "1.512.773", "1.488.688", "2.901.000",
   1987L,       55L, "1.473.947", "1.450.648", "2.824.000",
   1986L,       54L, "1.435.166", "1.412.683", "2.746.000",
   1985L,       52L, "1.396.589", "1.374.874", "2.666.000",
   1984L,       51L, "1.358.572", "1.337.628", "2.588.000",
   1983L,       49L, "1.321.306", "1.301.226", "2.514.000",
   1982L,       48L, "1.285.040", "1.265.740", "2.443.000",
   1981L,       46L, "1.249.954", "1.231.380", "2.372.000",
   1980L,       45L, "1.216.189", "1.198.113", "2.302.000",
   1979L,       46L, "1.183.549", "1.165.709", "2.349.258",
   1978L,       45L, "1.151.907", "1.134.303", "2.286.210",
   1977L,       44L, "1.121.564", "1.104.065", "2.225.630",
   1976L,       42L, "1.092.518", "1.075.026", "2.167.544",
   1975L,       41L, "1.064.693", "1.047.158", "2.111.850",
   1974L,       40L, "1.037.979", "1.020.256", "2.058.235",
   1973L,       39L, "1.012.096",   "994.152", "2.006.247",
   1972L,       38L,   "986.856",   "968.691", "1.955.547",
   1971L,       37L,   "961.980",   "943.506", "1.905.486",
   1970L,       36L,   "937.247",   "918.450", "1.855.697",
   1969L,       35L,   "912.558",   "893.410", "1.805.968",
   1968L,       34L,   "887.868",   "868.465", "1.756.333",
   1967L,       33L,   "862.766",   "843.295", "1.706.062",
   1966L,       32L,   "837.030",   "817.588", "1.654.619",
   1965L,       31L,   "811.096",   "791.641", "1.602.736",
   1964L,       30L,   "785.063",   "765.598", "1.550.661",
   1963L,       29L,   "758.976",   "739.670", "1.498.647",
   1962L,       28L,   "733.055",   "713.982", "1.447.037",
   1961L,       27L,   "707.489",   "688.649", "1.396.138",
   1960L,       26L,   "682.455",   "663.847", "1.346.302"
  )
#Con esto podemos ordenar los datos de menor a mayor
ordered <- poblaciones[order(poblaciones$Fecha), ]
poblaciones
```

Ahora, con esta nueva base de datos podemos ver la incidencia en una enfermedad, colocando anotaciones acerca de cuál es cada línea.

```{r}
library(tidyverse)
pepper<-tribble(
   ~t,  ~`1`,  ~`2`,  ~`3`,
   0,  0.08, 0.001, 0.001,
   7,  0.13,  0.01, 0.001,
  14,  0.78,  0.09,  0.01,
  21,  0.92,  0.25,  0.05,
  28,  0.99,   0.8,  0.18,
  35, 0.995,  0.98,  0.34,
  42, 0.999,  0.99,  0.48,
  49, 0.999, 0.999,  0.74
  ) 


pepper |> 
  pivot_longer(2:4,
               names_to = "epidemic",
               values_to = "inc")|>
  ggplot(aes(t, inc, color = epidemic))+
  geom_point()+
  geom_line()+
  annotate(geom = "text",
           x= 12,
           y= 0.75,
           label = "1")+
  annotate(geom = "text",
           x= 25,
           y= 0.75,
           label = "2")
```

## #Tabla de contingencia.

#Con `count` podemos hacer un conteo según lo que necesitemos, en este caso, se contaron los datos según fueran una región y una zona específica.

```{r}
cr <- read_csv("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")

cr |>
  count(region, zone)

```

# Tablas de diferentes variables

Con la librería janitor, podemos unir diferentes tablas en un solo gráfico, mostranto diferentes variables.

Como se puede observar, estas variables primero son separadas, por región, zona y cultivar.

Luego de eso se cuenta la cantidad que existen para cada categoría, añadiendo una variable más, que es el tipo de manejo. Y por último utilizamos el facet wrap para unirlas en un solo gráfico.

```{r}
library(janitor)
cr |>
  tabyl(region, zone)
# - - - - - - -
cr |>
  tabyl(cultivar, region)
# - - - - - - -
cr |>
  count(farm_management, cultivar) |>
  ggplot (aes(cultivar, n, fill = farm_management,
              label = n))+
  geom_col(position = 'dodge')+
  theme_bw()+
  theme(strip.text.x = element_blank(),
  legend.position = ("top"))+
  geom_text(position = position_dodge(width = 0.9))+
  facet_wrap(~cultivar, scales = "free_x")
```

Aquí se hace una comparación entre el tratamiento y el control en un gráfico de barras

```{r}
library(gsheet)
mg <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137')
mg|>
  group_by(trat)|>
  summarise(mean_comp = mean(comp),
            sd_comp = sd(comp))|>
  ggplot(aes(trat,mean_comp))+
  geom_col(fill = "steelblue", width = 0.5)+
  geom_errorbar(aes(ymin = mean_comp - sd_comp,
                    ymax = mean_comp + sd_comp,
                    width = 0.1))
```

Gráfico de bigotes. acerca de la media.

```{r}
mg|>
  group_by(trat)|>
  summarise(mean_comp = mean(comp),
            sd_comp = sd(comp))|>
  ggplot(aes(trat,mean_comp))+
 # geom_jitter(fill = "steelblue", width = 0.5)+
  geom_point (size = 3)+
  ylim(0,20)+
  geom_errorbar(aes(ymin = mean_comp - sd_comp,
                    ymax = mean_comp + sd_comp,
                    width = 0.1))+
  annotate (geom = "text",
            x = 1, y = 17.5,
            label = "*")
```
